using System.Linq;

public class Mapper
{<#

foreach(var classMap in ClassMaps)
{
#>
    public <#= classMap.TargetTypeFullName #> Map<#= classMap.SourceTypeName #>To<#= classMap.TargetTypeName #>(<#= classMap.SourceTypeFullName #> <#= classMap.SourceVariable #>)
    {
        <#= classMap.TargetTypeFullName #> <#= classMap.TargetVariable #> = new <#= classMap.TargetTypeFullName #>
        {<#
bool first = true;
foreach(var propMap in classMap.PropMaps.Where(x => !x.IsComposite))
{
#><#= first ? "" : "," #><#

#>
            <#= propMap.TargetProp.Name #> = <#= classMap.SourceVariable #>.<#= propMap.SourceProp.Name #><#

first = false;
}
#>
        };
<#
foreach(var propMap in classMap.PropMaps.Where(x => x.IsComposite))
{
if(typeof(IEnumerable).IsAssignableFrom(propMap.SourceProp.Type))
{
#>
        if (<#= classMap.SourceVariable #>.<#= propMap.SourceProp.Name #> != null)
            <#= classMap.TargetVariable #>.<#= propMap.TargetProp.Name #> = <#= classMap.SourceVariable #>.<#= propMap.SourceProp.Name #>.Select(Map<#= propMap.SourceProp.ElementType.Name #>To<#= propMap.TargetProp.ElementType.Name #>)<#= propMap.TargetProp.EnumerableType == EnumerableType.Array ? ".ToArray()" : "" #><#= propMap.TargetProp.EnumerableType == EnumerableType.List ? ".ToList()" : "" #>;<#
}
else
{
#>
        if (<#= classMap.SourceVariable #>.<#= propMap.SourceProp.Name #> != null)
            <#= classMap.TargetVariable #>.<#= propMap.TargetProp.Name #> = Map<#= propMap.SourceProp.TypeName #>To<#= propMap.TargetProp.TypeName #>(<#= classMap.SourceVariable #>.<#= propMap.SourceProp.Name #>);<#
}
}#>

        return <#= classMap.TargetVariable #>;
    }<#
}
	#>
}